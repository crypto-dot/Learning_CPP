//
// Created by Carlos Arbizu on 1/3/21.
//

//Constructors are special member methods that can be overloaded and are invoked
// during object creation with the same name as the class
// destructors are also special member methods with the same name as the class can be proceed
// by a tilde invoked automatically when the object is destroyed no return type and no perameter
// only 1 destructor per class useful for releasing memory
// C++ automatically generates a default constructor for classes that has no args
//*****************************************************************************
//constructor initialization lists:
// more efficent
// initializes list immediately follows the parameter list
//initializes data members as the object is created
// order of initialization is the order of decalaration in the class

#include <string>
#include <iostream>
#include "Account.h"
#include "AccountPoly.cpp"

using std::cout;
using std::endl;
using std::string;
class File{
private:
    string filename;
    string filepath;
public:
    //constructors
    //better way to intialize the varaibles instead of using assignment
    //data member will be initialized in the order of the CLASS declaration
    File(): filename{"default"},filepath {"default"}{

        //this default constructor would be automatically generated by c++
        //however it has been user defined (best practice) if the user has
        // constructors already then c++ would NOT generate the default constructor
        cout << "no args used" << endl;
       // filename = "default"; this is an assignment not initialization example the
       // filepath = "default"; strings filename and filepath have already been initialized to
                                // garbage they are now being assigned to "default"
    }
    File(string &filename) :filename{filename}{
        cout << "1 arg used" << endl;

    }
    File(string &filename,string &filepath) : filename{filename},
    filepath{filepath}{
        cout << "2 args used" << endl;

    }

    string get_name(){
        return filename;
    }

    //destructor
    ~File(){
        cout << "Destructor called" << endl;
    }


};
//******************************************************************************
//constructors can be delegated to avoid repetitive code this avoids errors and makes
// code more readable
class Player{

private:
    int health;
    int xp;
    string name;
public:
    Player();
    Player(string name);
    Player(string name,int xp,int health);
};
//constructors can also be specified out of class
//constructor delegation only works in the initialization list not in the body
// of the constructor delegating
//the body of the delegating constructor does NOT execute until after the information is passed
//through the other constructor and the other constructor's body is executed
Player::Player(string name, int xp, int health) : name{move(name)}, xp{xp},health{health} {}
Player::Player() : Player{"None",0,0}{}
Player::Player(string name) : Player{move(name),0,0}{}


int main (){
    {
        string name = "file.txt";
        AccountPoly frank;
        frank.set_name("Frank");
        File file(name);
        cout << file.get_name() << endl;
    } //destructor automatically called for all the objects in the scope



    return 0;
}

