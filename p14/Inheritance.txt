Types of inheritance in C++

Public:

-Most common
-Establishes "is-a" relationship between Dervied and Base class

Private and protected:

-Establishes "Derived class has a base class" relationship
-"is implemented in terms of " relationship

**Different from composition**

Great stackoverflow answer that provides an overview on this topic -
(https://stackoverflow.com/questions/860339/difference-between-private-public-and-protected-inheritance)

Protect Members and Class Access

Class Base {
    protected:
    //protected base class members....
};
-Accessible from the base class itself.
-Accessible from classes Derived from base.
-Not Accessible by objects of base or derived.



        Base class                          Access in Derived Class
 _______________________                     _______________________
|      public: a        |     public        |      public: a        |
|      protected: b     |    inheritance    |      protected: b     |
|      private: c       |                   |  private c: no access |
|_______________________|                   |_______________________|

        Base class                          Access in Derived Class
 _______________________                     _______________________
|      public: a        |     protected     |    *protected*: a     |
|      protected: b     |    inheritance    |      protected: b     |
|      private: c       |     (not is a     | private c : no access |
|_______________________|    inheritance)   |_______________________|

        Base class                          Access in Derived Class
 _______________________                     _______________________
|      public: a        |     protected     |    *private*: a       |
|      protected: b     |    inheritance    |     *private*: b      |
|      private: c       |     (not is a     | private : c no access |
|_______________________|    inheritance)   |_______________________|

Constructors/Destructors

-A derived class inherits from its base class
-The Base part of the derived class MUST be initialized BEFORE the derived class is initialized

-When a Derived class is created
*Base class constructor executes then
*Derived class constructor executes

-When a Derived class is destroyed
*Class destructors are invoked in reverse order
*The derived part of the Derived class MUST be destroyed BEFORE the base class destructor
is invoked
*Derived class destructor executes then
*Base class destructor executes
*Each destructor should free resources allocated in its own constructors

-A derived class does NOT inherit
*Base class constructors
*Base class destructors
*Base class overloaded assignment operators
*Base class friend functions

*However we can invoke the base class constructors,destructors,and overloaded assignment operators

-C++11 allows explicit inheritance of base 'non-special' constructors with
*using Base::base; anywhere in the class declaration
*Lots of rules involved often better to write your own constructors

-Passing Arguments to Base Class Constructors
*The Base part of a Derived class must be initialized first
*How can we control exactly which Base class constructor is being used during initialization?
*We can invoke the which Base class constructor we want in the initialization list of the derived class constructor

*******************
IMPORTANT INFO:
(https://stackoverflow.com/questions/23647409/error-base-class-constructor-must-explicitly-initialize-parent-class-construct)

When you initialize an object of a derived class, the base class part has to be constructed first.
If you don't initialize it yourself in the derived class' constructor by calling one of its constructors,
the compiler will attempt use the default constructor of the base class. If you provide custom constructors then
the default one will not be defined by the compiler.
*******************

-Copy/Move constructors and operator= in inheritance
*Copy/Move constructors and overloaded operator= are not inherited from the base class
*You may not need to provide your own
*compiled provided ones may work just fine
*We can explicitly invoke the Base class versions from the Derived class

-Copy constructor in inheritance
*Can invoke base copy constructor explicitly
*Derived object "other " will be sliced
Example code below:
Derived::Derived(const Derived *other) :Base(other), (Derived initialization list){

}

-Copy/Move constructors and operator= in inheritance Continued
*Often you do not need to provide your own copy/move constructors and/or operator= constructors
*However if you provide your Derived copy/move constructors and/or operator= constructor
then you will need to invoke the Base versions explicitly yourself
*As always be careful with raw pointers as they require deep copies
*If both the base class and the derived class have raw pointers
 YOU MUST DO DEEP COPIES for BOTH the base and the derived version

-Using and Redefining Base class Methods
*Derived class can directly invoke base class methods.
*Derived class can override or redefine Base class methods.
*Very powerful in the context of polymorphism

-Static binding of method calls
*Binding of which method to use is done at compile time.
*Static binding is default in c++
*Derived objects will use Derived::Deposit().
*But we can explicitly invoke the Base::Deposit() from the Derived::Deposit().
*This type of binding is OK, but is limited a much more powerful type of binding is
dynamic binding.

STATIC BINDING OF METHOD CALLS EXAMPLE:

Base b;
b.deposit(100); (Calls Base::Deposit)

Derived d;
d.deposit(100) (Calls Derived::Deposit)

Base *ptr = new Derived(); (perfectly valid as Derived is a Base object)
ptr->deposit (Base::Deposit)

-Multiple Inheritance

*C++ allows multiple inheritance.
*Multiple inheritance is when a derived class inherits from 2 or more classes.
*The Base class may belong to unrelated class hierarchies.
*Some compelling use cases
*Can be misused and run into the "diamond" problem
(https://stackoverflow.com/questions/39400343/multiple-inheritance-java-vs-c)