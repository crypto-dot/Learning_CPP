Stream Manipulators

*Streams have useful member functions to control formatting
*Can be used on input and output streams
*The time of the effect on the stream varies
*Can be used as member functions or as a manipulator
EX.
std::cout.width(10); //Member function
std::cout << std::setw(10); //Manipulator

(The main differences between the two is:

1. ios functions returns value while manipulators does not.

2.we can not create own ios functions while we can create our own manipulators.

3.ios functions are single and not possible to be combined while manipulators are possible to be applied in chain.

4.ios functions are member functions while manipulators are non member functions. (https://brainly.in/question/6914436)
)
*We are focused on manipulator usage.

-Formatting Integers
*Default when displaying integers is:
*dec(base 10)
*noshowbase - prefix used to show hexadecimal or octal
*nouppercase - when displaying a prefix and hex values it will be lowercase
*noshowpos - no '+' is displayed for positive integers

-Formatting Floating point numbers
The Default that C++ sets is:
*setprecision - number of digits displayed (6)
*fixed - not fixed to a specific number of digits after the decimal
*noshowpoint - trailing zeros are not shown
*nouppercase - when displaying in scientific notation
*noshowpos - no "+" is displayed for pos numbers

EX.1
double num {1234.5678 }
std:: cout << num << std::endl;
//will display
1234.57 (6 siginificant digits with rounding)

EX.2
double num{123456789.987654321}

std::cout << num << std::endl;
//will display
123457e+008 {Scientific notation since the number is so big that 6 digits of precision would give a totally different number
               however still maintains the 6 digits of precision in the first half of the notation.}

EX.3
double num {123456789.987654321}
std::cout << std::setprecision(9);
std::cout << num << std::endl;
//will display
123456790 (note rounding occurs and no trailing zeros)
(Note all the examples above are precision before the decimal point using std::fixed would completely change our results as
shown below)
EX.3
double num {123456789.987654321}
std::cout << std::fixed;
std::cout << num << std::endl;
//will display
123456789.987654 (6 digits of precision AFTER the decimal)
EX.4
double num {123456789.987654321}
std::cout << std::setprecision(3) << std::fixed;
std::cout << num << std::endl;
//will display
123456789.988 (Will display 3 digits after the decimal point)
EX.5
double num {123456789.987654321}
std::cout << std::setprecision(3) << std::scientifc;
std::cout << num << std::endl;
//will display
1.23e+008 (We can make the e capital with std::uppercase)
EX.6

double num {12.34}
std::cout << std::showpoint; //Shows trailing zeros up to the precision set
std::cout << num << std::endl; //12.3400 will be displayed since we have default precision of 6

(TO RESET ALL THE PRECISIONS,SCIENTIFIC NOTATION,TRAILING ZEROS, BACK TO THE DEFAULT SETTINGS YOU CAN USE
std::cout.unsetf(std::ios::scientific | std::ios::fixed);
std::cout << std::resetiosflags(std::ios::float))

-Field Width,align and fill
*Default when displaying floating point values is:
*setw - not set by default
*left - when no field width, right - when using field width
*fill - not set by default - blank space is used

